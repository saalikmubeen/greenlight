
# Generally speaking, makefile rules have the following structure:

# comment (optional) 
# target: prerequisite-target-1 prerequisite-target-2 ...
#    command 
#    command
#   ...

# When you specify a prerequisite target for a rule, the corresponding commands 
# for the prerequisite targets will be run before executing the actual target commands

# If a command in a makefile returns false, then make will stop running 
# the rule and exit with an error message â€” essentially stopping the rule in its tracks.

# Create the new confirm target.
confirm:
	@echo -n 'Are you sure? [y/N] ' && read ans && [ $${ans:-N} = y ]


run/api:
	go run ./cmd/api


db/psql:
	psql ${GREENLIGHT_DB_DSN}


db/migrations/new:
	@echo 'Creating migration files for ${name}...'
	migrate create -seq -ext=.sql -dir=./migrations ${name}

	
# The db/migrations/up target is a good example of a rule that has a prerequisite target.
# When we run make db/migrations/up, the confirm target will be run first,
# and if any command of the confirm target returns false, the db/migrations/up target will not be run.
db/migrations/up: confirm
	@echo 'Running up migrations...'
	migrate -path ./migrations -database ${GREENLIGHT_DB_DSN} up



current_time = $(shell date --iso-8601=seconds)

## build/api: build the cmd/api application
.PHONY: build/api 
build/api:
	@echo 'Building cmd/api...'
	go build -ldflags='-s -X main.buildTime=${current_time}' -o=./bin/api ./cmd/api
	GOOS=linux GOARCH=amd64 go build -ldflags='-s -X main.buildTime=${current_time}' -o=./bin/linux_amd64/api ./cmd/api